unit Model.Produto;

interface

uses
  Data.DB, FireDAC.Comp.Client, Model.Interfaces;

type
  TModelProduto = class(TInterfacedObject, IModelProduto)
  private
    F_produtoId: Integer;
    F_produtoNome: String;
    F_produtoDescricao: string;
    F_produtoValor: Double;
    F_produtoQuantidade: Double;
    F_categoriaId: Integer;
    function GetcategoriaId: Integer;
    function GetprodutoDescricao: string;
    function GetprodutoId: Integer;
    function GetprodutoNome: string;
    function GetprodutoQuantidade: Double;
    function GetprodutoValor: Double;
    procedure SetcategoriaId(const Value: Integer);
    procedure SetprodutoDescricao(const Value: string);
    procedure SetprodutoId(const Value: Integer);
    procedure SetprodutoNome(const Value: string);
    procedure SetprodutoQuantidade(const Value: Double);
    procedure SetprodutoValor(const Value: Double);
  public
    constructor Create(aConexao:TDataSet);
    destructor Destroy; override;
    function Selecionar(id:Integer):Boolean;
  published
    property produtoId        :Integer    read GetprodutoId      write SetprodutoId;
    property produtoNome      :string     read GetprodutoNome           write SetprodutoNome;
    property produtoDescricao :string     read GetprodutoDescricao      write SetprodutoDescricao;
    property produtoValor     :Double     read GetprodutoValor          write SetprodutoValor;
    property produtoQuantidade:Double     read GetprodutoQuantidade     write SetprodutoQuantidade;
    property categoriaId      :Integer    read GetcategoriaId    write SetcategoriaId;
  end;

implementation

uses
  System.SysUtils;


{ TCategoria }

{$region 'Constructor and Destructor'}
constructor TModelProduto.Create(aConexao:TDataSet);
begin
//  aConexao := TModelConexaoFactory.Conexao.Connection;
//  ConexaoDB := TModelConexaoFactory.Create.Conexao;
end;

destructor TModelProduto.Destroy;
begin

  inherited;
end;
function TModelProduto.GetcategoriaId: Integer;
begin
  Result := F_categoriaId;
end;

function TModelProduto.GetprodutoDescricao: string;
begin
  Result := F_produtoDescricao;
end;

function TModelProduto.GetprodutoId: Integer;
begin
  Result := F_produtoId;
end;

function TModelProduto.GetprodutoNome: string;
begin
  Result := F_produtoNome;
end;

function TModelProduto.GetprodutoQuantidade: Double;
begin
  Result := F_produtoQuantidade;
end;

function TModelProduto.GetprodutoValor: Double;
begin
  Result := F_produtoValor;
end;

procedure TModelProduto.SetcategoriaId(const Value: Integer);
begin
  F_categoriaId := Value;
end;

procedure TModelProduto.SetprodutoDescricao(const Value: string);
begin
  F_produtoDescricao := Value;
end;

procedure TModelProduto.SetprodutoId(const Value: Integer);
begin
  F_produtoId := Value;
end;

procedure TModelProduto.SetprodutoNome(const Value: string);
begin
  F_produtoNome := Value;
end;

procedure TModelProduto.SetprodutoQuantidade(const Value: Double);
begin
  F_produtoQuantidade := Value;
end;

procedure TModelProduto.SetprodutoValor(const Value: Double);
begin
  F_produtoValor := Value;
end;

{$endRegion}

function TModelProduto.Selecionar(id: Integer): Boolean;
begin
  try
    Result:=true;
//    Qry := ConexaoFactory.Create.Query;
//    Qry.Connection := ConexaoDB;
    Qry.SQL.Clear;
    Qry.SQL.Add('SELECT produtoId,'+
                '       nome, '+
                '       descricao, '+
                '       valor, '+
                '       quantidade, '+
                '       categoriaId '+
                '  FROM produtos '+
                ' WHERE produtoId=:produtoId');
    Qry.ParamByName('produtoId').AsInteger:=id;
    Try
      Qry.Open;

      Self.F_produtoId     := Qry.FieldByName('produtoId').AsInteger;
      Self.F_produtoNome          := Qry.FieldByName('produtoNome').AsString;
      Self.F_produtoDescricao     := Qry.FieldByName('produtoDescricao').AsString;
      Self.F_produtoValor         := Qry.FieldByName('produtoValor').AsFloat;
      Self.F_produtoQuantidade    := Qry.FieldByName('produtoQuantidade').AsFloat;
      Self.F_categoriaId   := Qry.FieldByName('categoriaId').AsInteger;
    Except
      Result:=false;
    End;

  finally
    if Assigned(Qry) then
       FreeAndNil(Qry);
  end;
end;

end.
